# Make sure to add comments all the time
ARG UBUNTU_VER=21.04
# Use ubuntu 21.04, perhaps doesn't work with later versions
FROM ubuntu:${UBUNTU_VER}
# all build arguments before a FROM are wiped clean
# so make sure to redeclare them again
ARG UBUNTU_VER=21.04

# Set the arguments
ARG CONTAINER_VER=1.0.0
ARG MPICH_VERSION="3.4rc1"
# note that the MPI version supported by mpich for all recent ones is 3
ARG MPI_VERSION=3
ARG MPICH_CONFIGURE_OPTIONS="--enable-fast=all,O3 --prefix=/usr --with-device=ch3"
ARG MPICH_MAKE_OPTIONS="-j4"
ARG OSU_BENCH_VERSION="5.9"
ARG OSU_BENCH_CONFIGURE_OPTIONS="--prefix=/usr/local CC=mpicc CXX=mpicxx CFLAGS=-O3"
ARG OSU_BENCH_MAKE_OPTIONS="-j4"
ARG CONTAINER_SCRIPT="container-info.mpich.sh"

# Add several labels, might want to change them
LABEL maintainer="ASKAP"
LABEL version=${CONTAINER_VER}
LABEL description="Container for MPI library using MPICH ABI"
LABEL tags="ubuntu/${UBUNTU_VER}, mpich/${MPICH_VERSION}, osu/${OSU_BENCH_VERSION}"
LABEL mpi.abi="mpich"
LABEL mpi.version=${MPI_VERSION} 
# store the MPI VERSION not the library version
LABEL mpi.library.version="${MPICH_VERSION}"
LABEL osu.version="${OSU_BENCH_VERSION}"

# now add several environment variables that could be useful
ENV MPI_ABI="mpich"
ENV MPI_VERSION=${MPI_VERSION}
ENV MPI_LIBRARY_VERSION=${MPICH_VERSION}
ENV CONTAINER_DESCRIPTION="Container for MPI library using MPICH ABI"
# some useful debian and os related environment variables 
ENV DEBIAN_FRONTEND="noninteractive"
ENV LANG="C.UTF-8" LC_ALL="C.UTF-8"

# Install package dependencies
# note here the inclusion of apt-get clean all and rm -rf
# to reduce the size of the image
RUN apt-get update -qq \
      && apt-get -y --no-install-recommends install \
         build-essential \
         gdb \
         gfortran \
         wget \
      && apt-get clean all \
      && rm -r /var/lib/apt/lists/*

# First build mpich
RUN mkdir -p /tmp/mpich-build && cd /tmp/mpich-build \
      && wget --no-check-certificate https://www.mpich.org/static/downloads/${MPICH_VERSION}/mpich-${MPICH_VERSION}.tar.gz \
      && tar xvzf mpich-${MPICH_VERSION}.tar.gz \
      && cd mpich-${MPICH_VERSION}  \
      && ./configure ${MPICH_CONFIGURE_OPTIONS} FFLAGS=-fallow-argument-mismatch \
      && make ${MPICH_MAKE_OPTIONS} \
      && make install \
      && ldconfig \
      && cd /tmp && rm -rf /tmp/mpich-build \
      # build osu benchmarks \
      && mkdir -p /tmp/osu-benchmark-build && cd /tmp/osu-benchmark-build \
      && wget --no-check-certificate https://mvapich.cse.ohio-state.edu/download/mvapich/osu-micro-benchmarks-${OSU_BENCH_VERSION}.tar.gz \
      && tar xzvf osu-micro-benchmarks-${OSU_BENCH_VERSION}.tar.gz \
      && cd osu-micro-benchmarks-${OSU_BENCH_VERSION} \
      && ./configure ${OSU_BENCH_CONFIGURE_OPTIONS} \
      && make ${OSU_BENCH_MAKE_OPTIONS} \
      && make install \
      && ldconfig \
      && cd /tmp && rm -rf /tmp/osu-benchmark-build

# then copy the application dependency check and info script
# and have that run as a default command
# note that since this script would be specific to this
# build, one might want to ensure that this script is simply
# called by the general container script
ADD ${CONTAINER_SCRIPT} /usr/bin/container-info.mpich.sh
RUN echo "#!/bin/bash" >> /usr/bin/container-info.sh \
    && chmod +x /usr/bin/container-info.mpich.sh \
    && /usr/bin/container-info.mpich.sh >> /usr/bin/container-info.sh \
    && chmod +x /usr/bin/container-info.sh

WORKDIR /

CMD ["/usr/bin/container-info.sh"]
